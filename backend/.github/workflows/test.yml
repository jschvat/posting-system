name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: posting_system_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        echo "NODE_ENV=test" > .env.test
        echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> .env.test
        echo "JWT_EXPIRES_IN=24h" >> .env.test
        echo "JWT_ISSUER=posting-system-test" >> .env.test
        echo "JWT_AUDIENCE=posting-system-users-test" >> .env.test
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/posting_system_test" >> .env.test
        echo "UPLOAD_DIR=./uploads" >> .env.test
        echo "MAX_FILE_SIZE=10485760" >> .env.test
        echo "RATE_LIMIT_WINDOW_MS=900000" >> .env.test
        echo "RATE_LIMIT_MAX_REQUESTS=100" >> .env.test

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm test

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      if: matrix.node-version == '18.x'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: coverage/

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: posting_system_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create integration test environment
      run: |
        echo "NODE_ENV=test" > .env.test
        echo "JWT_SECRET=test-jwt-secret-key-for-integration" >> .env.test
        echo "JWT_EXPIRES_IN=24h" >> .env.test
        echo "JWT_ISSUER=posting-system-integration" >> .env.test
        echo "JWT_AUDIENCE=posting-system-users-integration" >> .env.test
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/posting_system_integration" >> .env.test
        echo "UPLOAD_DIR=./uploads" >> .env.test
        echo "MAX_FILE_SIZE=10485760" >> .env.test
        echo "RATE_LIMIT_WINDOW_MS=900000" >> .env.test
        echo "RATE_LIMIT_MAX_REQUESTS=100" >> .env.test
        echo "PORT=3001" >> .env.test

    - name: Run database migrations
      run: |
        npm run migrate
      env:
        NODE_ENV: test

    - name: Run integration tests
      run: |
        npm run test -- --testPathPattern=integration
      continue-on-error: true

  security-audit:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for known vulnerabilities
      run: npx audit-ci --moderate